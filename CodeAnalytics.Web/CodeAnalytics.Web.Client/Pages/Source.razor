@page "/source/{*path}"
@using System.Runtime.CompilerServices
@using CodeAnalytics.Engine.Contracts.Occurrences
@using CodeAnalytics.Engine.Contracts.TextRendering
@using CodeAnalytics.Web.Common.Services.Source
@using CodeAnalytics.Web.Client.Components.Source
@using CodeAnalytics.Web.Client.Components.Explorer

@inject ISourceTextService SourceTextService

<CascadingValue Name="OccurrenceChanged" Value="_onOccurrenceChange">
   <div class="sources">
      <div class="left">
         <LeftBar Occurrence="@Occurrence"></LeftBar>
      </div>
      <div class="right">
         @if (_isError)
         {
            @_errorMessage
         }
         else
         {
            @if (_initialized)
            {
               <CodeViewer Spans="_spans"></CodeViewer>
            }
         }
      </div>
   </div>
</CascadingValue>

@code {

   private string? _path;
   [Parameter]
   public required string Path { 
      get => _path ?? string.Empty;
      set
      {
         _path = value;
         _ = InvokeAsync(OnFileChange);
      } 
   }
   
   public GlobalOccurrence? Occurrence { get; set; }

   private SyntaxSpan[] _spans = [];
   
   private bool _isError = false;
   private bool _initialized = false;
   
   private string? _errorMessage;
   private EventCallback<GlobalOccurrence?> _onOccurrenceChange;
   
   protected override async Task OnInitializedAsync()
   {
      _onOccurrenceChange = EventCallback.Factory.Create<GlobalOccurrence?>(this, OnOccurrenceChanged);
      await OnFileChange();
   }

   private Task OnOccurrenceChanged(GlobalOccurrence? occurrence)
   {
      Occurrence = occurrence;
      return Task.CompletedTask;
   }

   private async Task OnFileChange()
   {
      _initialized = false;
      var spansResult = await SourceTextService.GetSyntaxSpansByPath(Path);

      if (spansResult is not { Success: { } spans, IsSuccess: true })
      {
         _isError = true;
         _errorMessage = spansResult.Error.Detail;
         return;
      }

      _spans = spans;
      _initialized = true;
      _isError = false;
      
      await InvokeAsync(StateHasChanged);
   }
}