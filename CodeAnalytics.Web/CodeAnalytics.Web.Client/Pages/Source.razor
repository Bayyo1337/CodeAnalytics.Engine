@page "/Source/{*path}"
@using CodeAnalytics.Engine.Contracts.TextRendering
@using CodeAnalytics.Web.Common.Services.Source
@using CodeAnalytics.Web.Client.Components.Source
@using CodeAnalytics.Web.Client.Components.Explorer
@using CodeAnalytics.Web.Common.Models.Occurrences
@using CodeAnalytics.Web.Client.Components.Source.Bar

@inject ISourceTextService SourceTextService
@inject NavigationManager NavigationManager

<CascadingValue Name="OccurrenceChanged" Value="_onOccurrenceChange">
   <CascadingValue Name="SymbolIndex" Value="Symbol">
      <div class="sources">
         <div class="left">
            <LeftBar @ref="@_leftBarRef" Occurrence="@Occurrence"></LeftBar>
         </div>
         <div class="right">
            <CodeBar></CodeBar>
            <div class="right-content">
               @if (_isError)
               {
                  @_errorMessage
               }
               else
               {
                  @if (_isStart)
                  {
                     <span class="notice">Navigate to file in tree or go to search menu to find what you need.</span>
                  }
                  else if (_initialized)
                  {
                     <CodeViewer Spans="_spans"></CodeViewer>
                  }
               }
            </div>
         </div>
      </div>
   </CascadingValue>
</CascadingValue>

@code {

   [SupplyParameterFromQuery]
   public int? Symbol { get; set; }
   
   private string? _path;
   [Parameter]
   public required string Path { 
      get => _path ?? string.Empty;
      set
      {
         _path = value;
         _ = InvokeAsync(OnFileChange);
      } 
   }
   
   public OccurrenceState? Occurrence { get; set; }

   private SyntaxSpan[] _spans = [];
   
   private bool _isError = false;
   private bool _initialized = false;
   private bool _isStart = false;
   
   private string? _errorMessage;
   private EventCallback<OccurrenceState?> _onOccurrenceChange;

   private LeftBar? _leftBarRef;
   
   protected override async Task OnInitializedAsync()
   {
      _onOccurrenceChange = EventCallback.Factory.Create<OccurrenceState?>(this, OnOccurrenceChanged);
      await OnFileChange();
   }

   private Task OnOccurrenceChanged(OccurrenceState? occurrence)
   {
      Occurrence = occurrence;
      _leftBarRef?.SetTab(Occurrence is not null);

      if (occurrence is
          {
             ShouldNavigateToDefinition: true, 
             Occurrence.Declarations: [var first, ..]
          })
      {
         var path = (occurrence.Strings.GetValueOrDefault(first.FileId) ?? "").Replace('\\', '/');
         NavigationManager.NavigateTo($"/source/{path.TrimStart('/')}?symbol={first.SpanIndex}");
      }
      
      return Task.CompletedTask;
   }

   private async Task OnFileChange()
   {
      _initialized = false;
      _isStart = Path is "/" or "";

      if (_isStart)
      {
         _initialized = true;
         return;
      }
      
      var spansResult = await SourceTextService.GetSyntaxSpansByPath(Path);

      if (spansResult is not { Success: { } spans, IsSuccess: true })
      {
         _isError = true;
         _errorMessage = spansResult.Error.Detail;
         return;
      }

      _spans = spans;
      _initialized = true;
      _isError = false;
      _isStart = false;
      
      _leftBarRef?.SetCurrentlyActiveFile(Path);
      await InvokeAsync(StateHasChanged);
   }
}