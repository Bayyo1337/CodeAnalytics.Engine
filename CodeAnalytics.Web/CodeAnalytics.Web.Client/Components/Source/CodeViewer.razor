@using CodeAnalytics.Engine.Contracts.TextRendering

<div class="code-viewer">
   @{
      var remaining = Spans.AsSpan();
      var lineCount = 0;
      var total = 0;
   }
   <pre class="text">
      @while (remaining.Length > 0)
      {
         @GetLineFragment(remaining, total, out var consumed)

         total += consumed;
         remaining = remaining[consumed..];
         lineCount++;
         <br/>
      }
   </pre>
   <div class="line-numbers">
      <div class="numbers">
         @for (var e = 0; e < lineCount; e++)
         {
            <div class="line-number">@(e + 1)</div>
         }
      </div>
      <div class="padder">
         
      </div>
   </div>
</div>

@code {

   [Parameter, EditorRequired]
   public required SyntaxSpan[] Spans { get; set; }

   private RenderFragment GetLineFragment(scoped in ReadOnlySpan<SyntaxSpan> spans, int total, out int consumed)
   {
      List<SyntaxSpan> lineSpans = [];
      var i = 0;
      
      while (i < spans.Length && !spans[i].IsLineBreak)
      {
         lineSpans.Add(spans[i]);
         i++;
      }

      consumed = i + ((i < spans.Length && spans[i].IsLineBreak) ? 1 : 0);

      return @<CodeLine Spans="@lineSpans" Offset="@total"></CodeLine>;
   }
}