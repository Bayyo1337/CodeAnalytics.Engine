@using CodeAnalytics.Engine.Common.Extensions
@using CodeAnalytics.Engine.Contracts.Ids
@using CodeAnalytics.Engine.Contracts.Occurrences
@using CodeAnalytics.Engine.Contracts.TextRendering
@using CodeAnalytics.Web.Common.Models.Occurrences
@using CodeAnalytics.Web.Common.Services.Data

@inject IOccurrenceService OccurrenceService

@if (IsClickable)
{
   <span
      data-id="@Span.Reference.Value"
      style="color: @Span.Color;"
      class="@(GetClasses() ?? string.Empty)"
      @onclick="OnClick">
      @Span.RawText
   </span>
}
else
{
   <span
      data-id="@Span.Reference.Value"
      style="color: @Span.Color;"
      class="@(GetClasses() ?? string.Empty)">
      @Span.RawText
   </span>
}

@code {
   
   [Parameter, EditorRequired]
   public required SyntaxSpan Span { get; set; }

   [CascadingParameter(Name = "OccurrenceChanged")]
   public EventCallback<OccurrenceState?> OccurrenceChanged { get; set; }
   
   private async Task OnClick()
   {
      var taskOccurrence = OccurrenceService.GetOccurrences(Span.Reference.Value);
      var taskStrings = OccurrenceService.GetOccurrenceStrings(Span.Reference.Value);

      await Task.WhenAll(taskOccurrence)
         .WithAggregateException();

      var occurrence = await taskOccurrence;
      var strings = await taskStrings;

      if (occurrence is null || strings is null)
      {
         await OccurrenceChanged.InvokeAsync(null);
         return;
      }
      
      await OccurrenceChanged.InvokeAsync(new OccurrenceState()
      {
         Occurrence = occurrence,
         Strings = strings
      });
   }

   private bool IsClickable => !Span.Reference.IsEmpty;
   
   private string? GetClasses()
   {
      if (!Span.Reference.IsEmpty)
      {
         return "clickable ref";
      }

      return null;
   }
   
}